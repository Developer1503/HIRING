// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  CANDIDATE
  RECRUITER
  ADMIN
}

enum AssessmentType {
  DSA
  APTITUDE
  INTERVIEW
  FULL
}

enum QuestionDifficulty {
  EASY
  MEDIUM
  HARD
}

enum AssessmentStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
  EXPIRED
}

model User {
  id                String    @id @default(cuid())
  email             String    @unique
  password          String
  name              String
  phone             String?
  role              Role      @default(CANDIDATE)
  experienceLevel   String?
  preferredRole     String?
  avatar            String?
  isEmailVerified   Boolean   @default(false)
  emailVerifyToken  String?
  resetPasswordToken String?
  resetPasswordExpires DateTime?
  lastLogin         DateTime?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  // Relationships
  assessments       Assessment[]
  assessmentAttempts AssessmentAttempt[]
  codeSubmissions   CodeSubmission[]
  interviewRecordings InterviewRecording[]
  createdAssessments Assessment[] @relation("CreatedBy")

  @@map("users")
}

model Assessment {
  id          String         @id @default(cuid())
  title       String
  description String?
  type        AssessmentType
  duration    Int            // in minutes
  isActive    Boolean        @default(true)
  createdById String
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  // Relationships
  createdBy   User @relation("CreatedBy", fields: [createdById], references: [id])
  questions   AssessmentQuestion[]
  attempts    AssessmentAttempt[]

  @@map("assessments")
}

model Question {
  id          String            @id @default(cuid())
  type        AssessmentType
  title       String
  statement   String
  difficulty  QuestionDifficulty?
  tags        String[]
  options     Json?             // For aptitude questions
  correctAnswer Json?           // For aptitude questions
  explanation String?
  template    Json?             // For DSA questions (code templates)
  testCases   Json?             // For DSA questions
  expectedDuration Int?          // For interview questions (in seconds)
  tips        String[]          @default([])
  isActive    Boolean           @default(true)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  // Relationships
  assessmentQuestions AssessmentQuestion[]
  submissions         CodeSubmission[]
  recordings          InterviewRecording[]

  @@map("questions")
}

model AssessmentQuestion {
  id           String @id @default(cuid())
  assessmentId String
  questionId   String
  order        Int
  points       Int    @default(1)

  // Relationships
  assessment Assessment @relation(fields: [assessmentId], references: [id], onDelete: Cascade)
  question   Question   @relation(fields: [questionId], references: [id])

  @@unique([assessmentId, questionId])
  @@map("assessment_questions")
}

model AssessmentAttempt {
  id           String           @id @default(cuid())
  userId       String
  assessmentId String
  status       AssessmentStatus @default(NOT_STARTED)
  startedAt    DateTime?
  completedAt  DateTime?
  expiresAt    DateTime?
  score        Float?
  totalScore   Float?
  timeSpent    Int?             // in seconds
  answers      Json             @default("{}")
  analytics    Json?
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt

  // Relationships
  user         User               @relation(fields: [userId], references: [id])
  assessment   Assessment         @relation(fields: [assessmentId], references: [id])
  submissions  CodeSubmission[]
  recordings   InterviewRecording[]

  @@unique([userId, assessmentId])
  @@map("assessment_attempts")
}

model CodeSubmission {
  id                String    @id @default(cuid())
  userId            String
  questionId        String
  assessmentAttemptId String?
  language          String
  code              String
  status            String    // PENDING, RUNNING, COMPLETED, ERROR
  output            String?
  error             String?
  executionTime     Int?      // in milliseconds
  memoryUsage       Int?      // in bytes
  testResults       Json?
  score             Float?
  submittedAt       DateTime  @default(now())

  // Relationships
  user              User               @relation(fields: [userId], references: [id])
  question          Question           @relation(fields: [questionId], references: [id])
  assessmentAttempt AssessmentAttempt? @relation(fields: [assessmentAttemptId], references: [id])

  @@map("code_submissions")
}

model InterviewRecording {
  id                  String    @id @default(cuid())
  userId              String
  questionId          String
  assessmentAttemptId String?
  audioUrl            String?
  transcript          String?
  duration            Int?      // in seconds
  analysisResults     Json?     // Speech analysis results
  score               Float?
  recordedAt          DateTime  @default(now())

  // Relationships
  user                User               @relation(fields: [userId], references: [id])
  question            Question           @relation(fields: [questionId], references: [id])
  assessmentAttempt   AssessmentAttempt? @relation(fields: [assessmentAttemptId], references: [id])

  @@map("interview_recordings")
}

model AuditLog {
  id        String   @id @default(cuid())
  userId    String?
  action    String
  resource  String
  details   Json?
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())

  @@map("audit_logs")
}