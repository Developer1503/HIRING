name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: techhire_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: BACKEND/package-lock.json

    - name: Install dependencies
      working-directory: ./BACKEND
      run: npm ci

    - name: Setup environment
      working-directory: ./BACKEND
      run: |
        cp .env.example .env
        echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/techhire_test" >> .env
        echo "REDIS_URL=redis://localhost:6379" >> .env

    - name: Generate Prisma client
      working-directory: ./BACKEND
      run: npx prisma generate

    - name: Run database migrations
      working-directory: ./BACKEND
      run: npx prisma migrate deploy

    - name: Run linting
      working-directory: ./BACKEND
      run: npm run lint

    - name: Run tests
      working-directory: ./BACKEND
      run: npm run test:coverage

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./BACKEND/coverage/lcov.info
        flags: backend
        name: backend-coverage

  build:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: BACKEND/package-lock.json

    - name: Install dependencies
      working-directory: ./BACKEND
      run: npm ci

    - name: Build application
      working-directory: ./BACKEND
      run: npm run build

    - name: Build Docker image
      working-directory: ./BACKEND
      run: |
        docker build -t techhire-backend:${{ github.sha }} .
        docker tag techhire-backend:${{ github.sha }} techhire-backend:latest

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Run security audit
      working-directory: ./BACKEND
      run: npm audit --audit-level high

    - name: Run Snyk to check for vulnerabilities
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high
        command: test